app:
  title: HD Digital Landscape
  baseUrl: ${APP_BASE_URL}
  support:
    url: https://breu.io # Used by common ErrorPage
    items: # Used by common SupportButton component
      - title: Contact Support
        icon: supportagent
        links:
          - url: https://breu.io
            title: Chat

organization:
  name: HD Digital

backend:
  baseUrl: ${BACKEND_BASE_URL}
  reading:
    allow:
      - host: raw.githubusercontent.com
  listen:
    port: 7007
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: ${APP_BASE_URL}
    methods: [GET, POST, PUT, DELETE]
    credentials: true
  # config options: https://node-postgres.com/api/client
  database:
    client: pg
    connection:
      host: ${DB_HOST}
      port: ${DB_PORT}
      user: ${DB_USER}
      password: ${DB_PASS}
      # ssl:
      #   ca: # if you have a CA file and want to verify it you can uncomment this section
      #     $file: <file-path>/ca/server.crt
  cache:
    store: memory
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

proxy: {}

integrations:
  gitlab:
    - host: gitlab.com
      token: ${GITLAB_TOKEN}

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'local' # TODO: ysf: this needs to change to support CI/CD
  generator:
    runIn: 'local' # TODO: ysf: this needs to change to support CI/CD
  publisher:
    type: 'googleGcs'
    googleGcs:
      bucketName: 'backstage-docs-55f14ee8'

auth:
  # see https://backstage.io/docs/auth/ to learn about auth providers
  environment: development
  providers:
    onelogin:
      development:
        clientId: ${ONELOGIN_CLIENT_ID}
        clientSecret: ${ONELOGIN_CLIENT_SECRET}
        issuer: ${ONELOGIN_ISSUER}

# auth:
#   providers: {}


scaffolder:
  gitlab:
    api:
      token: ${GITLAB_TOKEN}

catalog:
  rules:
    - allow: [Component, System, API, Group, User, Resource, Location]
  locations:
    - type: gitlab-discovery
      target: ${GITLAB_DISCOVERY_URL}
    # Backstage example templates
    - type: url
      target: https://github.com/backstage/software-templates/blob/main/scaffolder-templates/react-ssr-template/template.yaml
      rules:
        - allow: [Template]
    - type: url
      target: https://github.com/backstage/software-templates/blob/main/scaffolder-templates/springboot-grpc-template/template.yaml
      rules:
        - allow: [Template]
    - type: url
      target: https://github.com/spotify/cookiecutter-golang/blob/master/template.yaml
      rules:
        - allow: [Template]
    - type: url
      target: https://github.com/backstage/software-templates/blob/main/scaffolder-templates/docs-template/template.yaml
      rules:
        - allow: [Template]